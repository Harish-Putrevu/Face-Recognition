# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13hDaYOmt4BnTLP15PqI6N7MLV1gqa7MN
"""

from flask import Flask, render_template, request, redirect, url_for
import face_recognition
import cv2
import os
import numpy as np

app = Flask(__name__)

KNOWN_FACES_DIR = 'C:\\Users\\Nitish Putrevu\\Downloads\\template\\known_faceszip'
UNKNOWN_FACES_DIR = 'C:\\Users\\Nitish Putrevu\\Downloads\\template\\unknown_faceszip'
TOLERANCE = 0.6
FRAME_THICKNESS = 3
FONT_THICKNESS = 2
MODEL = 'cnn'

known_faces = []
known_names = []

for name in os.listdir(KNOWN_FACES_DIR):
    for filename in os.listdir(f'{KNOWN_FACES_DIR}/{name}'):
        image = face_recognition.load_image_file(f'{KNOWN_FACES_DIR}/{name}/{filename}')
        encoding = face_recognition.face_encodings(image)[0]
        known_faces.append(encoding)
        known_names.append(name)

def recognize_faces(image_path):
    image = face_recognition.load_image_file(image_path)
    locations = face_recognition.face_locations(image, model=MODEL)
    encodings = face_recognition.face_encodings(image, locations)
    image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)

    for face_encoding, face_location in zip(encodings, locations):
        results = face_recognition.compare_faces(known_faces, face_encoding, TOLERANCE)
        match = None
        if True in results:
            match = known_names[results.index(True)]
            top_left = (face_location[3], face_location[0])
            bottom_right = (face_location[1], face_location[2])
            color = (0, 255, 0)
            cv2.rectangle(image, top_left, bottom_right, color, FRAME_THICKNESS)
            top_left = (face_location[3], face_location[2])
            bottom_right = (face_location[1], face_location[2] + 22)
            cv2.rectangle(image, top_left, bottom_right, color, cv2.FILLED)
            cv2.putText(image, match, (face_location[3] + 10, face_location[2] + 15),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (200, 200, 200), FONT_THICKNESS)

    return image

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        if 'file' not in request.files:
            return redirect(request.url)

        file = request.files['file']
        if file.filename == '':
            return redirect(request.url)

        if file:
            image_path = os.path.join(UNKNOWN_FACES_DIR, file.filename)
            file.save(image_path)

            result_image = recognize_faces(image_path)
            _, img_encoded = cv2.imencode('.png', result_image)
            response = img_encoded.tobytes()

            return response

    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)
